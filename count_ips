#!/usr/bin/python

import sys
import re
import gzip
import datetime
import argparse
import textwrap


time_from = datetime.time(0, 0)
to_time = datetime.time(23, 59, 59)
ip_list = []
EXCEPTED_IPS = (
    '127.0.0.1', # localhost 
    '82.117.232.99' # our ip
    )

template_for_time = '(?<=:)\d{2}\:\d{2}'
template_for_ip = '\d+\.\d+\.\d+\.\d+'

flag_from = flag_to = False
n_item = 0

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                  description=textwrap.dedent(
                                              """
                                              This script was desiged to detremine by nginx logs the amount of users visited the website.

                                              If you use more than one file and "time from" or/and "time to", you should specify these files sorted by date.

                                              Example: count_ips access.log-20160223.gz --from 07 00 --to 12 00 
                                              """
                                               )
                                )
parser.add_argument('input_files', nargs='+', help='file (gz format), if you want to pass more than one file, use whitespace between files')
parser.add_argument('--show-ip', action='store_const', default=False, const=True, help='shows list of ips')
parser.add_argument('--from', dest='time_from', help='time from HH:MM', nargs='?')
parser.add_argument('--to', dest='to_time', help='to time HH:MM', nargs='?')

args = parser.parse_args()

input_files = args.input_files
count_of_files = len(input_files) if len(input_files) > 1 else None


if args.time_from is not None:
    str_time_from = args.time_from.split(':')
    time_from  = datetime.time(int(str_time_from[0]), int(str_time_from[1]))
    flag_from = True

if args.to_time is not None:
    str_to_time = args.to_time.split(':')
    to_time = datetime.time(int(str_to_time[0]), int(str_to_time[1]))
    flag_to = True


def check_time(row, t_from, t_to):
    search_result = re.search(template_for_time, row).group().split(':')
    time_res = datetime.time(int(search_result[0]), int(search_result[-1]))
        
    return t_from < time_res < t_to
    

search = lambda template: re.search(template_for_ip, template).group()

_time_from = time_from

for input_file in input_files:
    local_to_time = datetime.time(23, 59, 59)
    if not count_of_files or (count_of_files and n_item == count_of_files -1):
        local_to_time = to_time
    with gzip.open(input_file) as file:
        lines = file.readlines()
        for row in lines:
            if not search(row) in ip_list and search(row) not in EXCEPTED_IPS and check_time(row, time_from, local_to_time):
                ip_list.append(search(row))
            else:
                continue
    if count_of_files:
        time_from = datetime.time(0, 0)
        n_item += 1


if flag_to or flag_from:
    print 'From time: ', _time_from, ' To time: ', to_time

print 'Count of users: ', len(ip_list)

if args.show_ip:
    print 'Ips:'
    for ip in ip_list:
        print ip
